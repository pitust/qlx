{
    "name": "qlx",
    "scopeName": "source.qlx",
    "fileTypes": ["qlx"],
    "patterns": [{ "include": "#comments" }, { "include": "#keywords" }, { "include": "#operators" }],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.qlx",
                    "begin": "//",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.comment.begin.qlx" }
                    },
                    "end": "\n",
                    "endCaptures": { "0": { "name": "punctuation.definition.comment.end.qlx" } }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.operand.qlx",
                    "match": "(?<![a-zA-Z0-9_])(fn|do|while|end|return|if|else|let|call[0-9]+)(?![a-zA-Z0-9_])|:"
                },
                {
                    "name": "entity.name.function",
                    "match": "(?<![a-zA-Z0-9_])(print|printflush|getlink|read|draw\\.line|draw\\.clear|draw\\.flush|sense\\.[a-z]+)(?![a-zA-Z0-9_])|:"
                },
                {
                    "name": "constant.language.boolean.true.qlx",
                    "match": "(?<![a-zA-Z0-9_])(true|false)(?![a-zA-Z0-9_])|:"
                },
                {
                    "name": "constant.numeric.qlx",
                    "match": "\\-?0x[0-9a-fA-F]+|\\-?[0-9]"
                },
                {
                    "name": "constant.language.symbol",
                    "match": "[\\:@][a-zA-Z_][a-zA-Z_0-9]*"
                },
                {
                    "name": "entity.name.function",
                    "match": "(?<=call[0-9]+\\s+)[a-zA-Z_][a-zA-Z_0-9]*"
                },
                {
                    "name": "entity.name.function",
                    "match": "(?<=fn\\s+)[a-zA-Z_][a-zA-Z_0-9]*"
                },
                {
                    "name": "string.quoted.double",
                    "match": "\"[^\"]*\""
                },
                {
                    "name": "variable.other.constant.qlx",
                    "match": "(?<=let\\s+)[a-zA-Z_][A-Za-z_0-9]*"
                },
                {
                    "name": "variable.parameter.qlx",
                    "match": "(?<={\\s+)([a-zA-Z_][A-Za-z_0-9]*\\s+)}"
                },
                {
                    "name": "variable.other.readwrite.qlx",
                    "match": "[a-zA-Z_][A-Za-z_0-9]*"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operand.qlx",
                    "match": "\\+|\\-|\\*|\\/|=="
                },
                {
                    "name": "punctuation.section.block.begin.bracket.curly.qlx",
                    "match": "do|end"
                }
            ]
        }
    }
}
